package ${package.Controller};

import org.springframework.web.bind.annotation.RequestMapping;
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
@Resource
private ${table.serviceName} ${table.entityPath}Service;

@GetMapping
public Result getAll() {
        return new Result(true, ${table.entityPath}Service.list());
        }

@PostMapping
public Result save(@RequestBody ${entity} ${table.entityPath}) {
        boolean flag = ${table.entityPath}Service.save(${table.entityPath});
        return new Result(flag, flag ? "添加成功" : "添加失败");
        }

@PutMapping
public Result update(@RequestBody ${entity} ${table.entityPath}) {
        return new Result(${table.entityPath}Service.updateById(${table.entityPath}));
        }

@DeleteMapping("{id}")
public Result delete(@PathVariable Integer id) {

        return new Result(${table.entityPath}Service.removeById(id));
        }

/**
 * 批量删除
 *
 * @param ids
 * @return
 */
@PostMapping("/del/batch")
public Result deleteByIds(@RequestBody List<Integer> ids) {
        return new Result(${table.entityPath}Service.removeByIds(ids));
        }

@GetMapping("{id}")
public Result getById(@PathVariable Integer id) {
        return new Result(true, ${table.entityPath}Service.getById(id));
        }

@GetMapping("{currentPage}/{pageSize}")
public Result getPage(
@PathVariable int currentPage,
@PathVariable int pageSize,${entity} ${table.entityPath}) {
        IPage<${entity}> page = ${table.entityPath}Service.getPage(currentPage, pageSize,${table.entityPath});
        //如果当前页码值大于了总页码值
        if (currentPage > page.getPages()) {
        page = ${table.entityPath}Service.getPage((int) page.getPages(), pageSize,${table.entityPath});
        }
        return new Result(true, page);
        }

@PostMapping("/import")
public Result imp(MultipartFile file) {
        try {
        InputStream inputStream = file.getInputStream();
        ExcelReader excelReader = ExcelUtil.getReader(inputStream);
        List<${entity}> list = excelReader.readAll(${entity}.class);
        ${table.entityPath}Service.saveBatch(list);
        return new Result(true);
        } catch (IOException e) {
        e.printStackTrace();
        throw new ServiceException(Constants.CODE_500, "文件上传错误");
        }
        }
    
    
    
}
#end
